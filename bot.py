import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from abbreviations import find_abbreviation

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message()
async def handle_message(message: Message):
    query = message.text.strip()
    if not query:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    matches = find_abbreviation(query)

    if not matches:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ì–ª–æ—Å—Å–∞—Ä–∏–π –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        try:
            with open("unknown_abbr.txt", "a", encoding="utf-8") as f:
                f.write(f"{query}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return

    item = matches[0]
    abbr = item["abbr"]
    full = item["full"]
    description = item.get("description")

    keyboard = InlineKeyboardBuilder()
    if description:
        keyboard.button(text="‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ", callback_data=f"desc|{abbr}")
    keyboard.button(text="üè† –î–æ–º–æ–π", callback_data="home")

    await message.answer(
        f"üîπ <b>{abbr}</b>\n<b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</b> {full}",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data.startswith("desc|"))
async def send_description(callback: CallbackQuery):
    abbr = callback.data.split("|")[1]
    match = find_abbreviation(abbr)
    if match and match[0].get("description"):
        description = match[0]["description"]
        source = match[0].get("source", "")
        text = f"<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b> {description}"
        if source:
            text += f"\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"
        await callback.message.answer(text)
    else:
        await callback.answer("–ù–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å.", show_alert=True)

@dp.callback_query(F.data == "home")
async def go_home(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
